// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PRODUTOR
  TRANSPORTADOR
  TRANSFORMADOR
  ARMAZENADOR
  DISTRIBUIDOR
}

enum DocumentType {
  NIF
  CERTIDAO_COMERCIAL
  OUTRO
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  role      Role
  createdAt DateTime   @default(now())
  verified  Boolean    @default(false)
  profile   Profile?
  subRoles  SubRole[]
  offerings Offering[]
  documents Document[]
}

model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  fullName    String
  companyName String?
  location    String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model SubRole {
  id     String @id @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Offering {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Document {
  id         String       @id @default(uuid())
  userId     String
  type       DocumentType
  fileName   String
  fileUrl    String // e.g. S3 or local path
  uploadedAt DateTime     @default(now())
  verified   Boolean      @default(false)
  user       User         @relation(fields: [userId], references: [id])
}
